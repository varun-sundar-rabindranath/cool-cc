// This is a comment

INCLUDES:
#include "./../data/arith/arith_ast.hpp"

TERMINALS:
// ideally this should be what the lexer gives you. but lets comeback to that later
%empty
(
)
id
*
+

NONTERMINALS:
// The first non-terminal defined here is always the start symbol
S
E
E_DASH
T
T_DASH
F

PRODUCTIONS:
// Use %empty to define epsilon productions
// There should be only one production for the start symbol
// All the individual elements on the left side of the production should be
// separated by whitespace
S : E
{
  // Semantic Rule
  return MPTN(new S_Node({ R0 }));
}

E : T E_DASH
{
  return MPTN(new E_Node({ R0 , R1 }));
}

E_DASH : + T E_DASH
{
  return MPTN(new E_DASH_Node(
	      { MPTN(new Plus_Node()) , R1 , R2 }));
}

E_DASH : %empty
{
  return MPTN(new E_DASH_Node(
	      { MPTN(new Empty_Node()) }));
}

T : F T_DASH
{
  return MPTN(new T_Node({R0, R1}));
}

T_DASH : * F T_DASH
{
  return MPTN(new T_DASH_Node(
		{ MPTN(new Mul_Node()), R1, R2}));
}

T_DASH : %empty
{
  return MPTN(new T_DASH_Node(
		{ MPTN(new Empty_Node()) }));
}

F : ( E )
{
  return MPTN( new F_Node({
		MPTN(new Open_Brace_Node()),
		R1,
		MPTN(new Close_Brace_Node())}));
}

F : id
{
  return MPTN(new F_Node({
	      MPTN(new ID_Node())}));
}
