45
class
45
type
Board
45
inherits
45
type
IO
45
lbrace
47
identifier
rows
47
colon
47
type
Int
47
semi
48
identifier
columns
48
colon
48
type
Int
48
semi
49
identifier
board_size
49
colon
49
type
Int
49
semi
51
identifier
size_of_board
51
lparen
51
identifier
initial
51
colon
51
type
String
51
rparen
51
colon
51
type
Int
51
lbrace
52
identifier
initial
52
dot
52
identifier
length
52
lparen
52
rparen
53
rbrace
53
semi
55
identifier
board_init
55
lparen
55
identifier
start
55
colon
55
type
String
55
rparen
55
colon
55
type
SELF_TYPE
55
lbrace
56
lparen
56
let
56
identifier
size
56
colon
56
type
Int
56
larrow
56
identifier
size_of_board
56
lparen
56
identifier
start
56
rparen
56
in
57
lbrace
58
if
58
identifier
size
58
equals
58
integer
15
58
then
59
lbrace
60
identifier
rows
60
larrow
60
integer
3
60
semi
61
identifier
columns
61
larrow
61
integer
5
61
semi
62
identifier
board_size
62
larrow
62
identifier
size
62
semi
63
rbrace
64
else
64
if
64
identifier
size
64
equals
64
integer
16
64
then
65
lbrace
66
identifier
rows
66
larrow
66
integer
4
66
semi
67
identifier
columns
67
larrow
67
integer
4
67
semi
68
identifier
board_size
68
larrow
68
identifier
size
68
semi
69
rbrace
70
else
70
if
70
identifier
size
70
equals
70
integer
20
70
then
71
lbrace
72
identifier
rows
72
larrow
72
integer
4
72
semi
73
identifier
columns
73
larrow
73
integer
5
73
semi
74
identifier
board_size
74
larrow
74
identifier
size
74
semi
75
rbrace
76
else
76
if
76
identifier
size
76
equals
76
integer
21
76
then
77
lbrace
78
identifier
rows
78
larrow
78
integer
3
78
semi
79
identifier
columns
79
larrow
79
integer
7
79
semi
80
identifier
board_size
80
larrow
80
identifier
size
80
semi
81
rbrace
82
else
82
if
82
identifier
size
82
equals
82
integer
25
82
then
83
lbrace
84
identifier
rows
84
larrow
84
integer
5
84
semi
85
identifier
columns
85
larrow
85
integer
5
85
semi
86
identifier
board_size
86
larrow
86
identifier
size
86
semi
87
rbrace
88
else
88
if
88
identifier
size
88
equals
88
integer
28
88
then
89
lbrace
90
identifier
rows
90
larrow
90
integer
7
90
semi
91
identifier
columns
91
larrow
91
integer
4
91
semi
92
identifier
board_size
92
larrow
92
identifier
size
92
semi
93
rbrace
94
else
95
lbrace
96
identifier
rows
96
larrow
96
integer
5
96
semi
97
identifier
columns
97
larrow
97
integer
5
97
semi
98
identifier
board_size
98
larrow
98
identifier
size
98
semi
99
rbrace
100
fi
100
fi
100
fi
100
fi
100
fi
100
fi
100
semi
101
identifier
self
101
semi
102
rbrace
103
rparen
104
rbrace
104
semi
106
rbrace
106
semi
110
class
110
type
CellularAutomaton
110
inherits
110
type
Board
110
lbrace
111
identifier
population_map
111
colon
111
type
String
111
semi
113
identifier
init
113
lparen
113
identifier
map
113
colon
113
type
String
113
rparen
113
colon
113
type
SELF_TYPE
113
lbrace
114
lbrace
115
identifier
population_map
115
larrow
115
identifier
map
115
semi
116
identifier
board_init
116
lparen
116
identifier
map
116
rparen
116
semi
117
identifier
self
117
semi
118
rbrace
119
rbrace
119
semi
124
identifier
print
124
lparen
124
rparen
124
colon
124
type
SELF_TYPE
124
lbrace
126
lparen
126
let
126
identifier
i
126
colon
126
type
Int
126
larrow
126
integer
0
126
in
127
lparen
127
let
127
identifier
num
127
colon
127
type
Int
127
larrow
127
identifier
board_size
127
in
128
lbrace
129
identifier
out_string
129
lparen
129
string
\n
129
rparen
129
semi
130
while
130
identifier
i
130
lt
130
identifier
num
130
loop
131
lbrace
132
identifier
out_string
132
lparen
132
identifier
population_map
132
dot
132
identifier
substr
132
lparen
132
identifier
i
132
comma
132
identifier
columns
132
rparen
132
rparen
132
semi
133
identifier
out_string
133
lparen
133
string
\n
133
rparen
133
semi
134
identifier
i
134
larrow
134
identifier
i
134
plus
134
identifier
columns
134
semi
135
rbrace
136
pool
136
semi
137
identifier
out_string
137
lparen
137
string
\n
137
rparen
137
semi
138
identifier
self
138
semi
139
rbrace
140
rparen
140
rparen
141
rbrace
141
semi
143
identifier
num_cells
143
lparen
143
rparen
143
colon
143
type
Int
143
lbrace
144
identifier
population_map
144
dot
144
identifier
length
144
lparen
144
rparen
145
rbrace
145
semi
147
identifier
cell
147
lparen
147
identifier
position
147
colon
147
type
Int
147
rparen
147
colon
147
type
String
147
lbrace
148
if
148
identifier
board_size
148
minus
148
integer
1
148
lt
148
identifier
position
148
then
149
string
 
150
else
151
identifier
population_map
151
dot
151
identifier
substr
151
lparen
151
identifier
position
151
comma
151
integer
1
151
rparen
152
fi
153
rbrace
153
semi
155
identifier
north
155
lparen
155
identifier
position
155
colon
155
type
Int
155
rparen
155
colon
155
type
String
155
lbrace
156
if
156
lparen
156
identifier
position
156
minus
156
identifier
columns
156
rparen
156
lt
156
integer
0
156
then
157
string
 
158
else
159
identifier
cell
159
lparen
159
identifier
position
159
minus
159
identifier
columns
159
rparen
160
fi
161
rbrace
161
semi
163
identifier
south
163
lparen
163
identifier
position
163
colon
163
type
Int
163
rparen
163
colon
163
type
String
163
lbrace
164
if
164
identifier
board_size
164
lt
164
lparen
164
identifier
position
164
plus
164
identifier
columns
164
rparen
164
then
165
string
 
166
else
167
identifier
cell
167
lparen
167
identifier
position
167
plus
167
identifier
columns
167
rparen
168
fi
169
rbrace
169
semi
171
identifier
east
171
lparen
171
identifier
position
171
colon
171
type
Int
171
rparen
171
colon
171
type
String
171
lbrace
172
if
172
lparen
172
lparen
172
lparen
172
identifier
position
172
plus
172
integer
1
172
rparen
172
divide
172
identifier
columns
172
rparen
172
times
172
identifier
columns
172
rparen
172
equals
172
lparen
172
identifier
position
172
plus
172
integer
1
172
rparen
172
then
173
string
 
174
else
175
identifier
cell
175
lparen
175
identifier
position
175
plus
175
integer
1
175
rparen
176
fi
177
rbrace
177
semi
179
identifier
west
179
lparen
179
identifier
position
179
colon
179
type
Int
179
rparen
179
colon
179
type
String
179
lbrace
180
if
180
identifier
position
180
equals
180
integer
0
180
then
181
string
 
182
else
183
if
183
lparen
183
lparen
183
identifier
position
183
divide
183
identifier
columns
183
rparen
183
times
183
identifier
columns
183
rparen
183
equals
183
identifier
position
183
then
184
string
 
185
else
186
identifier
cell
186
lparen
186
identifier
position
186
minus
186
integer
1
186
rparen
187
fi
187
fi
188
rbrace
188
semi
190
identifier
northwest
190
lparen
190
identifier
position
190
colon
190
type
Int
190
rparen
190
colon
190
type
String
190
lbrace
191
if
191
lparen
191
identifier
position
191
minus
191
identifier
columns
191
rparen
191
lt
191
integer
0
191
then
192
string
 
193
else
193
if
193
lparen
193
lparen
193
identifier
position
193
divide
193
identifier
columns
193
rparen
193
times
193
identifier
columns
193
rparen
193
equals
193
identifier
position
193
then
194
string
 
195
else
196
identifier
north
196
lparen
196
identifier
position
196
minus
196
integer
1
196
rparen
197
fi
197
fi
198
rbrace
198
semi
200
identifier
northeast
200
lparen
200
identifier
position
200
colon
200
type
Int
200
rparen
200
colon
200
type
String
200
lbrace
201
if
201
lparen
201
identifier
position
201
minus
201
identifier
columns
201
rparen
201
lt
201
integer
0
201
then
202
string
 
203
else
203
if
203
lparen
203
lparen
203
lparen
203
identifier
position
203
plus
203
integer
1
203
rparen
203
divide
203
identifier
columns
203
rparen
203
times
203
identifier
columns
203
rparen
203
equals
203
lparen
203
identifier
position
203
plus
203
integer
1
203
rparen
203
then
204
string
 
205
else
206
identifier
north
206
lparen
206
identifier
position
206
plus
206
integer
1
206
rparen
207
fi
207
fi
208
rbrace
208
semi
210
identifier
southeast
210
lparen
210
identifier
position
210
colon
210
type
Int
210
rparen
210
colon
210
type
String
210
lbrace
211
if
211
identifier
board_size
211
lt
211
lparen
211
identifier
position
211
plus
211
identifier
columns
211
rparen
211
then
212
string
 
213
else
213
if
213
lparen
213
lparen
213
lparen
213
identifier
position
213
plus
213
integer
1
213
rparen
213
divide
213
identifier
columns
213
rparen
213
times
213
identifier
columns
213
rparen
213
equals
213
lparen
213
identifier
position
213
plus
213
integer
1
213
rparen
213
then
214
string
 
215
else
216
identifier
south
216
lparen
216
identifier
position
216
plus
216
integer
1
216
rparen
217
fi
217
fi
218
rbrace
218
semi
220
identifier
southwest
220
lparen
220
identifier
position
220
colon
220
type
Int
220
rparen
220
colon
220
type
String
220
lbrace
221
if
221
identifier
board_size
221
lt
221
lparen
221
identifier
position
221
plus
221
identifier
columns
221
rparen
221
then
222
string
 
223
else
223
if
223
lparen
223
lparen
223
identifier
position
223
divide
223
identifier
columns
223
rparen
223
times
223
identifier
columns
223
rparen
223
equals
223
identifier
position
223
then
224
string
 
225
else
226
identifier
south
226
lparen
226
identifier
position
226
minus
226
integer
1
226
rparen
227
fi
227
fi
228
rbrace
228
semi
230
identifier
neighbors
230
lparen
230
identifier
position
230
colon
230
type
Int
230
rparen
230
colon
230
type
Int
230
lbrace
231
lbrace
232
if
232
identifier
north
232
lparen
232
identifier
position
232
rparen
232
equals
232
string
X
232
then
232
integer
1
232
else
232
integer
0
232
fi
233
plus
233
if
233
identifier
south
233
lparen
233
identifier
position
233
rparen
233
equals
233
string
X
233
then
233
integer
1
233
else
233
integer
0
233
fi
234
plus
234
if
234
identifier
east
234
lparen
234
identifier
position
234
rparen
234
equals
234
string
X
234
then
234
integer
1
234
else
234
integer
0
234
fi
235
plus
235
if
235
identifier
west
235
lparen
235
identifier
position
235
rparen
235
equals
235
string
X
235
then
235
integer
1
235
else
235
integer
0
235
fi
236
plus
236
if
236
identifier
northeast
236
lparen
236
identifier
position
236
rparen
236
equals
236
string
X
236
then
236
integer
1
236
else
236
integer
0
236
fi
237
plus
237
if
237
identifier
northwest
237
lparen
237
identifier
position
237
rparen
237
equals
237
string
X
237
then
237
integer
1
237
else
237
integer
0
237
fi
238
plus
238
if
238
identifier
southeast
238
lparen
238
identifier
position
238
rparen
238
equals
238
string
X
238
then
238
integer
1
238
else
238
integer
0
238
fi
239
plus
239
if
239
identifier
southwest
239
lparen
239
identifier
position
239
rparen
239
equals
239
string
X
239
then
239
integer
1
239
else
239
integer
0
239
fi
239
semi
240
rbrace
241
rbrace
241
semi
247
identifier
cell_at_next_evolution
247
lparen
247
identifier
position
247
colon
247
type
Int
247
rparen
247
colon
247
type
String
247
lbrace
249
if
249
identifier
neighbors
249
lparen
249
identifier
position
249
rparen
249
equals
249
integer
3
249
then
250
string
X
251
else
252
if
252
identifier
neighbors
252
lparen
252
identifier
position
252
rparen
252
equals
252
integer
2
252
then
253
if
253
identifier
cell
253
lparen
253
identifier
position
253
rparen
253
equals
253
string
X
253
then
254
string
X
255
else
256
string
-
257
fi
258
else
259
string
-
260
fi
260
fi
261
rbrace
261
semi
264
identifier
evolve
264
lparen
264
rparen
264
colon
264
type
SELF_TYPE
264
lbrace
265
lparen
265
let
265
identifier
position
265
colon
265
type
Int
265
larrow
265
integer
0
265
in
266
lparen
266
let
266
identifier
num
266
colon
266
type
Int
266
larrow
266
identifier
num_cells
266
lparen
266
rparen
266
in
267
lparen
267
let
267
identifier
temp
267
colon
267
type
String
267
in
268
lbrace
269
while
269
identifier
position
269
lt
269
identifier
num
269
loop
270
lbrace
271
identifier
temp
271
larrow
271
identifier
temp
271
dot
271
identifier
concat
271
lparen
271
identifier
cell_at_next_evolution
271
lparen
271
identifier
position
271
rparen
271
rparen
271
semi
272
identifier
position
272
larrow
272
identifier
position
272
plus
272
integer
1
272
semi
273
rbrace
274
pool
274
semi
275
identifier
population_map
275
larrow
275
identifier
temp
275
semi
276
identifier
self
276
semi
277
rbrace
278
rparen
278
rparen
278
rparen
279
rbrace
279
semi
284
identifier
option
284
lparen
284
rparen
284
colon
284
type
String
284
lbrace
285
lbrace
286
lparen
286
let
286
identifier
num
286
colon
286
type
Int
286
in
287
lbrace
288
identifier
out_string
288
lparen
288
string
\nPlease chose a number:\n
288
rparen
288
semi
289
identifier
out_string
289
lparen
289
string
\t1: A cross\n
289
rparen
289
semi
290
identifier
out_string
290
lparen
290
string
\t2: A slash from the upper left to lower right\n
290
rparen
290
semi
291
identifier
out_string
291
lparen
291
string
\t3: A slash from the upper right to lower left\n
291
rparen
291
semi
292
identifier
out_string
292
lparen
292
string
\t4: An X\n
292
rparen
292
semi
293
identifier
out_string
293
lparen
293
string
\t5: A greater than sign \n
293
rparen
293
semi
294
identifier
out_string
294
lparen
294
string
\t6: A less than sign\n
294
rparen
294
semi
295
identifier
out_string
295
lparen
295
string
\t7: Two greater than signs\n
295
rparen
295
semi
296
identifier
out_string
296
lparen
296
string
\t8: Two less than signs\n
296
rparen
296
semi
297
identifier
out_string
297
lparen
297
string
\t9: A 'V'\n
297
rparen
297
semi
298
identifier
out_string
298
lparen
298
string
\t10: An inverse 'V'\n
298
rparen
298
semi
299
identifier
out_string
299
lparen
299
string
\t11: Numbers 9 and 10 combined\n
299
rparen
299
semi
300
identifier
out_string
300
lparen
300
string
\t12: A full grid\n
300
rparen
300
semi
301
identifier
out_string
301
lparen
301
string
\t13: A 'T'\n
301
rparen
301
semi
302
identifier
out_string
302
lparen
302
string
\t14: A plus '+'\n
302
rparen
302
semi
303
identifier
out_string
303
lparen
303
string
\t15: A 'W'\n
303
rparen
303
semi
304
identifier
out_string
304
lparen
304
string
\t16: An 'M'\n
304
rparen
304
semi
305
identifier
out_string
305
lparen
305
string
\t17: An 'E'\n
305
rparen
305
semi
306
identifier
out_string
306
lparen
306
string
\t18: A '3'\n
306
rparen
306
semi
307
identifier
out_string
307
lparen
307
string
\t19: An 'O'\n
307
rparen
307
semi
308
identifier
out_string
308
lparen
308
string
\t20: An '8'\n
308
rparen
308
semi
309
identifier
out_string
309
lparen
309
string
\t21: An 'S'\n
309
rparen
309
semi
310
identifier
out_string
310
lparen
310
string
Your choice => 
310
rparen
310
semi
311
identifier
num
311
larrow
311
identifier
in_int
311
lparen
311
rparen
311
semi
312
identifier
out_string
312
lparen
312
string
\n
312
rparen
312
semi
313
if
313
identifier
num
313
equals
313
integer
1
313
then
314
string
 XX  XXXX XXXX  XX  
315
else
315
if
315
identifier
num
315
equals
315
integer
2
315
then
316
string
    X   X   X   X   X    
317
else
317
if
317
identifier
num
317
equals
317
integer
3
317
then
318
string
X     X     X     X     X
319
else
319
if
319
identifier
num
319
equals
319
integer
4
319
then
320
string
X   X X X   X   X X X   X
321
else
321
if
321
identifier
num
321
equals
321
integer
5
321
then
322
string
X     X     X   X   X    
323
else
323
if
323
identifier
num
323
equals
323
integer
6
323
then
324
string
    X   X   X     X     X
325
else
325
if
325
identifier
num
325
equals
325
integer
7
325
then
326
string
X  X  X  XX  X      
327
else
327
if
327
identifier
num
327
equals
327
integer
8
327
then
328
string
 X  XX  X  X  X     
329
else
329
if
329
identifier
num
329
equals
329
integer
9
329
then
330
string
X   X X X   X  
331
else
331
if
331
identifier
num
331
equals
331
integer
10
331
then
332
string
  X   X X X   X
333
else
333
if
333
identifier
num
333
equals
333
integer
11
333
then
334
string
X X X X X X X X
335
else
335
if
335
identifier
num
335
equals
335
integer
12
335
then
336
string
XXXXXXXXXXXXXXXXXXXXXXXXX
337
else
337
if
337
identifier
num
337
equals
337
integer
13
337
then
338
string
XXXXX  X    X    X    X  
339
else
339
if
339
identifier
num
339
equals
339
integer
14
339
then
340
string
  X    X  XXXXX  X    X  
341
else
341
if
341
identifier
num
341
equals
341
integer
15
341
then
342
string
X     X X X X   X X  
343
else
343
if
343
identifier
num
343
equals
343
integer
16
343
then
344
string
  X X   X X X X     X
345
else
345
if
345
identifier
num
345
equals
345
integer
17
345
then
346
string
XXXXX   X   XXXXX   X   XXXX
347
else
347
if
347
identifier
num
347
equals
347
integer
18
347
then
348
string
XXX    X   X  X    X   XXXX 
349
else
349
if
349
identifier
num
349
equals
349
integer
19
349
then
350
string
 XX X  XX  X XX 
351
else
351
if
351
identifier
num
351
equals
351
integer
20
351
then
352
string
 XX X  XX  X XX X  XX  X XX 
353
else
353
if
353
identifier
num
353
equals
353
integer
21
353
then
354
string
 XXXX   X    XX    X   XXXX 
355
else
356
string
                         
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
fi
357
semi
358
rbrace
359
rparen
359
semi
360
rbrace
361
rbrace
361
semi
366
identifier
prompt
366
lparen
366
rparen
366
colon
366
type
Bool
366
lbrace
367
lbrace
368
lparen
368
let
368
identifier
ans
368
colon
368
type
String
368
in
369
lbrace
370
identifier
out_string
370
lparen
370
string
Would you like to continue with the next generation? \n
370
rparen
370
semi
371
identifier
out_string
371
lparen
371
string
Please use lowercase y or n for your answer [y]: 
371
rparen
371
semi
372
identifier
ans
372
larrow
372
identifier
in_string
372
lparen
372
rparen
372
semi
373
identifier
out_string
373
lparen
373
string
\n
373
rparen
373
semi
374
if
374
identifier
ans
374
equals
374
string
n
374
then
375
false
376
else
377
true
378
fi
378
semi
379
rbrace
380
rparen
380
semi
381
rbrace
382
rbrace
382
semi
385
identifier
prompt2
385
lparen
385
rparen
385
colon
385
type
Bool
385
lbrace
386
lparen
386
let
386
identifier
ans
386
colon
386
type
String
386
in
387
lbrace
388
identifier
out_string
388
lparen
388
string
\n\n
388
rparen
388
semi
389
identifier
out_string
389
lparen
389
string
Would you like to choose a background pattern? \n
389
rparen
389
semi
390
identifier
out_string
390
lparen
390
string
Please use lowercase y or n for your answer [n]: 
390
rparen
390
semi
391
identifier
ans
391
larrow
391
identifier
in_string
391
lparen
391
rparen
391
semi
392
if
392
identifier
ans
392
equals
392
string
y
392
then
393
true
394
else
395
false
396
fi
396
semi
397
rbrace
398
rparen
399
rbrace
399
semi
402
rbrace
402
semi
404
class
404
type
Main
404
inherits
404
type
CellularAutomaton
404
lbrace
405
identifier
cells
405
colon
405
type
CellularAutomaton
405
semi
407
identifier
main
407
lparen
407
rparen
407
colon
407
type
SELF_TYPE
407
lbrace
408
lbrace
409
lparen
409
let
409
identifier
continue
409
colon
409
type
Bool
409
in
410
lparen
410
let
410
identifier
choice
410
colon
410
type
String
410
in
411
lbrace
412
identifier
out_string
412
lparen
412
string
Welcome to the Game of Life.\n
412
rparen
412
semi
413
identifier
out_string
413
lparen
413
string
There are many initial states to choose from. \n
413
rparen
413
semi
414
while
414
identifier
prompt2
414
lparen
414
rparen
414
loop
415
lbrace
416
identifier
continue
416
larrow
416
true
416
semi
417
identifier
choice
417
larrow
417
identifier
option
417
lparen
417
rparen
417
semi
418
identifier
cells
418
larrow
418
lparen
418
new
418
type
CellularAutomaton
418
rparen
418
dot
418
identifier
init
418
lparen
418
identifier
choice
418
rparen
418
semi
419
identifier
cells
419
dot
419
identifier
print
419
lparen
419
rparen
419
semi
420
while
420
identifier
continue
420
loop
421
if
421
identifier
prompt
421
lparen
421
rparen
421
then
422
lbrace
423
identifier
cells
423
dot
423
identifier
evolve
423
lparen
423
rparen
423
semi
424
identifier
cells
424
dot
424
identifier
print
424
lparen
424
rparen
424
semi
425
rbrace
426
else
427
identifier
continue
427
larrow
427
false
428
fi
429
pool
429
semi
430
rbrace
431
pool
431
semi
432
identifier
self
432
semi
433
rbrace
433
rparen
433
rparen
433
semi
433
rbrace
434
rbrace
434
semi
435
rbrace
435
semi
